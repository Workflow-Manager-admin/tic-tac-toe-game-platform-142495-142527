{"is_source_file": true, "format": "Python", "description": "This file provides utility functions for a tic-tac-toe game backend, including password hashing, JWT token creation and decoding, computer move generation, winner checking, and board state evaluation.", "external_files": ["passlib.context", "jose", "datetime", "random", "typing"], "external_methods": ["passlib.context.CryptContext", "jose.jwt", "jose.JWTError", "datetime.datetime", "datetime.timedelta", "random.choice", "typing.List", "typing.Optional"], "published": [], "classes": [], "methods": [{"name": "str hash_password(password: str)", "description": "Hashes a plaintext password using bcrypt.", "scope": "", "scopeKind": ""}, {"name": "bool verify_password(plain_password: str, hashed_password: str)", "description": "Verifies a plaintext password against a hashed password.", "scope": "", "scopeKind": ""}, {"name": "create_access_token(data: dict, expires_delta: Optional[timedelta] = None)", "description": "Creates a JWT access token with optional expiration.", "scope": "", "scopeKind": ""}, {"name": "decode_access_token(token: str)", "description": "Decodes and verifies a JWT token, returning payload or None.", "scope": "", "scopeKind": ""}, {"name": "(int,int) generate_computer_move(board: List[List[Optional[str]]])", "description": "Generates a random move for the computer by selecting an empty cell.", "scope": "", "scopeKind": ""}, {"name": "Optional[str] check_winner(board: List[List[Optional[str]]])", "description": "Checks the game board for a winner ('X' or 'O').", "scope": "", "scopeKind": ""}, {"name": "bool is_board_full(board: List[List[Optional[str]]])", "description": "Checks if the Tic Tac Toe board is full.", "scope": "", "scopeKind": ""}], "calls": ["pwd_context.hash", "pwd_context.verify", "jwt.encode", "jwt.decode", "random.choice", "all", "any"], "search-terms": ["JWT", "password hashing", "token creation", "tic-tac-toe", "board evaluation", "generate move"], "state": 2, "file_id": 7, "knowledge_revision": 15, "git_revision": "", "ctags": [{"_type": "tag", "name": "ACCESS_TOKEN_EXPIRE_MINUTES", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^ACCESS_TOKEN_EXPIRE_MINUTES = 60$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ALGORITHM", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^ALGORITHM = \"HS256\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "SECRET_KEY", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^SECRET_KEY = \"supersecret\"  # Use env for production$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "check_winner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def check_winner(board: List[List[Optional[str]]]) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(board: List[List[Optional[str]]])"}, {"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):$/", "language": "Python", "kind": "function", "signature": "(data: dict, expires_delta: Optional[timedelta] = None)"}, {"_type": "tag", "name": "decode_access_token", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def decode_access_token(token: str):$/", "language": "Python", "kind": "function", "signature": "(token: str)"}, {"_type": "tag", "name": "generate_computer_move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def generate_computer_move(board: List[List[Optional[str]]]) -> (int, int):$/", "language": "Python", "typeref": "typename:(int,int)", "kind": "function", "signature": "(board: List[List[Optional[str]]])"}, {"_type": "tag", "name": "hash_password", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def hash_password(password: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(password: str)"}, {"_type": "tag", "name": "is_board_full", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def is_board_full(board: List[List[Optional[str]]]) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(board: List[List[Optional[str]]])"}, {"_type": "tag", "name": "pwd_context", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-game-platform-142495-142527/tic_tac_toe_backend/src/api/utils.py", "pattern": "/^def verify_password(plain_password: str, hashed_password: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(plain_password: str, hashed_password: str)"}], "hash": "ee34c55d1fc137cf5aa722d8f70ab667", "format-version": 4, "code-base-name": "tic_tac_toe_backend", "filename": "tic_tac_toe_backend/src/api/utils.py", "fields": [{"name": "ACCESS_TOKEN_EXPIRE_MINUTES = 60", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ALGORITHM = \"HS256\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SECRET_KEY = \"supersecret\"  # Use env for production", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"15": ""}]}